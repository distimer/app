/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * Distimer Swagger API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import type {
  AuthctrlLoginRes,
  AuthctrlLogoutTokenReq,
  AuthctrlOauthLoginReqBody,
  AuthctrlRefreshTokenReq,
  AuthctrlRefreshTokenRes
} from '../../schemas'
import { customInstance } from '../../mutator/axios';
import type { ErrorType, BodyType } from '../../mutator/axios';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Logout
 */
export const deleteAuthLogout = (
    authctrlLogoutTokenReq: BodyType<AuthctrlLogoutTokenReq>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/auth/logout`, method: 'DELETE',
      headers: {'Content-Type': 'application/json', },
      data: authctrlLogoutTokenReq
    },
      options);
    }
  


export const getDeleteAuthLogoutMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAuthLogout>>, TError,{data: BodyType<AuthctrlLogoutTokenReq>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteAuthLogout>>, TError,{data: BodyType<AuthctrlLogoutTokenReq>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteAuthLogout>>, {data: BodyType<AuthctrlLogoutTokenReq>}> = (props) => {
          const {data} = props ?? {};

          return  deleteAuthLogout(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteAuthLogoutMutationResult = NonNullable<Awaited<ReturnType<typeof deleteAuthLogout>>>
    export type DeleteAuthLogoutMutationBody = BodyType<AuthctrlLogoutTokenReq>
    export type DeleteAuthLogoutMutationError = ErrorType<unknown>

    /**
 * @summary Logout
 */
export const useDeleteAuthLogout = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteAuthLogout>>, TError,{data: BodyType<AuthctrlLogoutTokenReq>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteAuthLogout>>,
        TError,
        {data: BodyType<AuthctrlLogoutTokenReq>},
        TContext
      > => {

      const mutationOptions = getDeleteAuthLogoutMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Apple Oauth Login
 */
export const postAuthOauthApple = (
    authctrlOauthLoginReqBody: BodyType<AuthctrlOauthLoginReqBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<AuthctrlLoginRes>(
      {url: `/auth/oauth/apple`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: authctrlOauthLoginReqBody
    },
      options);
    }
  


export const getPostAuthOauthAppleMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthOauthApple>>, TError,{data: BodyType<AuthctrlOauthLoginReqBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthOauthApple>>, TError,{data: BodyType<AuthctrlOauthLoginReqBody>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthOauthApple>>, {data: BodyType<AuthctrlOauthLoginReqBody>}> = (props) => {
          const {data} = props ?? {};

          return  postAuthOauthApple(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthOauthAppleMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthOauthApple>>>
    export type PostAuthOauthAppleMutationBody = BodyType<AuthctrlOauthLoginReqBody>
    export type PostAuthOauthAppleMutationError = ErrorType<void>

    /**
 * @summary Apple Oauth Login
 */
export const usePostAuthOauthApple = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthOauthApple>>, TError,{data: BodyType<AuthctrlOauthLoginReqBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof postAuthOauthApple>>,
        TError,
        {data: BodyType<AuthctrlOauthLoginReqBody>},
        TContext
      > => {

      const mutationOptions = getPostAuthOauthAppleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Google Oauth Login
 */
export const postAuthOauthGoogle = (
    authctrlOauthLoginReqBody: BodyType<AuthctrlOauthLoginReqBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<AuthctrlLoginRes>(
      {url: `/auth/oauth/google`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: authctrlOauthLoginReqBody
    },
      options);
    }
  


export const getPostAuthOauthGoogleMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthOauthGoogle>>, TError,{data: BodyType<AuthctrlOauthLoginReqBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthOauthGoogle>>, TError,{data: BodyType<AuthctrlOauthLoginReqBody>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthOauthGoogle>>, {data: BodyType<AuthctrlOauthLoginReqBody>}> = (props) => {
          const {data} = props ?? {};

          return  postAuthOauthGoogle(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthOauthGoogleMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthOauthGoogle>>>
    export type PostAuthOauthGoogleMutationBody = BodyType<AuthctrlOauthLoginReqBody>
    export type PostAuthOauthGoogleMutationError = ErrorType<void>

    /**
 * @summary Google Oauth Login
 */
export const usePostAuthOauthGoogle = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthOauthGoogle>>, TError,{data: BodyType<AuthctrlOauthLoginReqBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof postAuthOauthGoogle>>,
        TError,
        {data: BodyType<AuthctrlOauthLoginReqBody>},
        TContext
      > => {

      const mutationOptions = getPostAuthOauthGoogleMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Refresh Token
 */
export const postAuthRefresh = (
    authctrlRefreshTokenReq: BodyType<AuthctrlRefreshTokenReq>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<AuthctrlRefreshTokenRes>(
      {url: `/auth/refresh`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: authctrlRefreshTokenReq
    },
      options);
    }
  


export const getPostAuthRefreshMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthRefresh>>, TError,{data: BodyType<AuthctrlRefreshTokenReq>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postAuthRefresh>>, TError,{data: BodyType<AuthctrlRefreshTokenReq>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postAuthRefresh>>, {data: BodyType<AuthctrlRefreshTokenReq>}> = (props) => {
          const {data} = props ?? {};

          return  postAuthRefresh(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostAuthRefreshMutationResult = NonNullable<Awaited<ReturnType<typeof postAuthRefresh>>>
    export type PostAuthRefreshMutationBody = BodyType<AuthctrlRefreshTokenReq>
    export type PostAuthRefreshMutationError = ErrorType<unknown>

    /**
 * @summary Refresh Token
 */
export const usePostAuthRefresh = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postAuthRefresh>>, TError,{data: BodyType<AuthctrlRefreshTokenReq>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof postAuthRefresh>>,
        TError,
        {data: BodyType<AuthctrlRefreshTokenReq>},
        TContext
      > => {

      const mutationOptions = getPostAuthRefreshMutationOptions(options);

      return useMutation(mutationOptions);
    }
    