/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * Distimer Swagger API
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  AuthctrlLoginRes,
  AuthctrlRefreshTokenRes
} from '../../schemas'

export const getPostAuthOauthAppleResponseMock = (overrideResponse: Partial< AuthctrlLoginRes > = {}): AuthctrlLoginRes => ({access_token: faker.word.sample(), name: faker.word.sample(), refresh_token: faker.word.sample(), user_id: faker.word.sample(), ...overrideResponse})

export const getPostAuthOauthGoogleResponseMock = (overrideResponse: Partial< AuthctrlLoginRes > = {}): AuthctrlLoginRes => ({access_token: faker.word.sample(), name: faker.word.sample(), refresh_token: faker.word.sample(), user_id: faker.word.sample(), ...overrideResponse})

export const getPostAuthRefreshResponseMock = (overrideResponse: Partial< AuthctrlRefreshTokenRes > = {}): AuthctrlRefreshTokenRes => ({access_token: faker.word.sample(), refresh_token: faker.word.sample(), ...overrideResponse})


export const getDeleteAuthLogoutMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/auth/logout', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getPostAuthOauthAppleMockHandler = (overrideResponse?: AuthctrlLoginRes | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<AuthctrlLoginRes> | AuthctrlLoginRes)) => {
  return http.post('*/auth/oauth/apple', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostAuthOauthAppleResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostAuthOauthGoogleMockHandler = (overrideResponse?: AuthctrlLoginRes | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<AuthctrlLoginRes> | AuthctrlLoginRes)) => {
  return http.post('*/auth/oauth/google', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostAuthOauthGoogleResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostAuthRefreshMockHandler = (overrideResponse?: AuthctrlRefreshTokenRes | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<AuthctrlRefreshTokenRes> | AuthctrlRefreshTokenRes)) => {
  return http.post('*/auth/refresh', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostAuthRefreshResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getAuthMock = () => [
  getDeleteAuthLogoutMockHandler(),
  getPostAuthOauthAppleMockHandler(),
  getPostAuthOauthGoogleMockHandler(),
  getPostAuthRefreshMockHandler()
]
