/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * Distimer Swagger API
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  TimerctrlCreateTimerReq,
  TimerctrlModifyTimerDTO,
  TimerctrlTimerDTO,
  TimerctrlTimerWithEdgeInfoDTO
} from '../../schemas'
import { customInstance } from '../../mutator/axios';
import type { ErrorType, BodyType } from '../../mutator/axios';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Get My Timer Info
 */
export const getTimer = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<TimerctrlTimerDTO>(
      {url: `/timer`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTimerQueryKey = () => {
    return [`/timer`] as const;
    }

    
export const getGetTimerInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getTimer>>>, TError = ErrorType<void>>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTimer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTimerQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTimer>>> = ({ signal }) => getTimer(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTimer>>, TError, TData> & { queryKey: QueryKey }
}

export type GetTimerInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getTimer>>>
export type GetTimerInfiniteQueryError = ErrorType<void>


export function useGetTimerInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getTimer>>>, TError = ErrorType<void>>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTimer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTimer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetTimerInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getTimer>>>, TError = ErrorType<void>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTimer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTimer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetTimerInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getTimer>>>, TError = ErrorType<void>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTimer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Get My Timer Info
 */

export function useGetTimerInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getTimer>>>, TError = ErrorType<void>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTimer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetTimerInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetTimerQueryOptions = <TData = Awaited<ReturnType<typeof getTimer>>, TError = ErrorType<void>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTimer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTimerQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTimer>>> = ({ signal }) => getTimer(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTimer>>, TError, TData> & { queryKey: QueryKey }
}

export type GetTimerQueryResult = NonNullable<Awaited<ReturnType<typeof getTimer>>>
export type GetTimerQueryError = ErrorType<void>


export function useGetTimer<TData = Awaited<ReturnType<typeof getTimer>>, TError = ErrorType<void>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTimer>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTimer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetTimer<TData = Awaited<ReturnType<typeof getTimer>>, TError = ErrorType<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTimer>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTimer>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetTimer<TData = Awaited<ReturnType<typeof getTimer>>, TError = ErrorType<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTimer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Get My Timer Info
 */

export function useGetTimer<TData = Awaited<ReturnType<typeof getTimer>>, TError = ErrorType<void>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTimer>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetTimerQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Modify Timer
 */
export const putTimer = (
    timerctrlModifyTimerDTO: BodyType<TimerctrlModifyTimerDTO>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<TimerctrlTimerDTO>(
      {url: `/timer`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: timerctrlModifyTimerDTO
    },
      options);
    }
  


export const getPutTimerMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTimer>>, TError,{data: BodyType<TimerctrlModifyTimerDTO>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof putTimer>>, TError,{data: BodyType<TimerctrlModifyTimerDTO>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putTimer>>, {data: BodyType<TimerctrlModifyTimerDTO>}> = (props) => {
          const {data} = props ?? {};

          return  putTimer(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutTimerMutationResult = NonNullable<Awaited<ReturnType<typeof putTimer>>>
    export type PutTimerMutationBody = BodyType<TimerctrlModifyTimerDTO>
    export type PutTimerMutationError = ErrorType<void>

    /**
 * @summary Modify Timer
 */
export const usePutTimer = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putTimer>>, TError,{data: BodyType<TimerctrlModifyTimerDTO>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof putTimer>>,
        TError,
        {data: BodyType<TimerctrlModifyTimerDTO>},
        TContext
      > => {

      const mutationOptions = getPutTimerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Create Timer
 */
export const postTimer = (
    timerctrlCreateTimerReq: BodyType<TimerctrlCreateTimerReq>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<TimerctrlTimerDTO>(
      {url: `/timer`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: timerctrlCreateTimerReq
    },
      options);
    }
  


export const getPostTimerMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTimer>>, TError,{data: BodyType<TimerctrlCreateTimerReq>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postTimer>>, TError,{data: BodyType<TimerctrlCreateTimerReq>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postTimer>>, {data: BodyType<TimerctrlCreateTimerReq>}> = (props) => {
          const {data} = props ?? {};

          return  postTimer(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostTimerMutationResult = NonNullable<Awaited<ReturnType<typeof postTimer>>>
    export type PostTimerMutationBody = BodyType<TimerctrlCreateTimerReq>
    export type PostTimerMutationError = ErrorType<void>

    /**
 * @summary Create Timer
 */
export const usePostTimer = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postTimer>>, TError,{data: BodyType<TimerctrlCreateTimerReq>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof postTimer>>,
        TError,
        {data: BodyType<TimerctrlCreateTimerReq>},
        TContext
      > => {

      const mutationOptions = getPostTimerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Delete the timer of the user
 */
export const deleteTimer = (
    
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/timer`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteTimerMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTimer>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteTimer>>, TError,void, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteTimer>>, void> = () => {
          

          return  deleteTimer(requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteTimerMutationResult = NonNullable<Awaited<ReturnType<typeof deleteTimer>>>
    
    export type DeleteTimerMutationError = ErrorType<void>

    /**
 * @summary Delete the timer of the user
 */
export const useDeleteTimer = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteTimer>>, TError,void, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteTimer>>,
        TError,
        void,
        TContext
      > => {

      const mutationOptions = getDeleteTimerMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Timer by Group
 */
export const getTimerGroupId = (
    id: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<TimerctrlTimerWithEdgeInfoDTO[]>(
      {url: `/timer/group/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetTimerGroupIdQueryKey = (id: string,) => {
    return [`/timer/group/${id}`] as const;
    }

    
export const getGetTimerGroupIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getTimerGroupId>>>, TError = ErrorType<void>>(id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTimerGroupId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTimerGroupIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTimerGroupId>>> = ({ signal }) => getTimerGroupId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTimerGroupId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetTimerGroupIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getTimerGroupId>>>
export type GetTimerGroupIdInfiniteQueryError = ErrorType<void>


export function useGetTimerGroupIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getTimerGroupId>>>, TError = ErrorType<void>>(
 id: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTimerGroupId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTimerGroupId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetTimerGroupIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getTimerGroupId>>>, TError = ErrorType<void>>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTimerGroupId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTimerGroupId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetTimerGroupIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getTimerGroupId>>>, TError = ErrorType<void>>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTimerGroupId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Get Timer by Group
 */

export function useGetTimerGroupIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getTimerGroupId>>>, TError = ErrorType<void>>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getTimerGroupId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetTimerGroupIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetTimerGroupIdQueryOptions = <TData = Awaited<ReturnType<typeof getTimerGroupId>>, TError = ErrorType<void>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTimerGroupId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetTimerGroupIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getTimerGroupId>>> = ({ signal }) => getTimerGroupId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getTimerGroupId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetTimerGroupIdQueryResult = NonNullable<Awaited<ReturnType<typeof getTimerGroupId>>>
export type GetTimerGroupIdQueryError = ErrorType<void>


export function useGetTimerGroupId<TData = Awaited<ReturnType<typeof getTimerGroupId>>, TError = ErrorType<void>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTimerGroupId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTimerGroupId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetTimerGroupId<TData = Awaited<ReturnType<typeof getTimerGroupId>>, TError = ErrorType<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTimerGroupId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getTimerGroupId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetTimerGroupId<TData = Awaited<ReturnType<typeof getTimerGroupId>>, TError = ErrorType<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTimerGroupId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Get Timer by Group
 */

export function useGetTimerGroupId<TData = Awaited<ReturnType<typeof getTimerGroupId>>, TError = ErrorType<void>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getTimerGroupId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetTimerGroupIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



