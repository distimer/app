/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * Distimer Swagger API
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  TimerctrlTimerDTO,
  TimerctrlTimerWithEdgeInfoDTO
} from '../../schemas'

export const getGetTimerResponseMock = (overrideResponse: Partial< TimerctrlTimerDTO > = {}): TimerctrlTimerDTO => ({content: faker.word.sample(), id: faker.word.sample(), shared_group_ids: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), start_at: faker.word.sample(), subject_id: faker.word.sample(), ...overrideResponse})

export const getPutTimerResponseMock = (overrideResponse: Partial< TimerctrlTimerDTO > = {}): TimerctrlTimerDTO => ({content: faker.word.sample(), id: faker.word.sample(), shared_group_ids: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), start_at: faker.word.sample(), subject_id: faker.word.sample(), ...overrideResponse})

export const getPostTimerResponseMock = (overrideResponse: Partial< TimerctrlTimerDTO > = {}): TimerctrlTimerDTO => ({content: faker.word.sample(), id: faker.word.sample(), shared_group_ids: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), start_at: faker.word.sample(), subject_id: faker.word.sample(), ...overrideResponse})

export const getGetTimerGroupIdResponseMock = (): TimerctrlTimerWithEdgeInfoDTO[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({affiliation: {group_id: faker.word.sample(), joined_at: faker.word.sample(), nickname: faker.word.sample(), role: faker.number.int({min: 0, max: 2}), user_id: faker.word.sample()}, content: faker.word.sample(), id: faker.word.sample(), start_at: faker.word.sample(), subject: {color: faker.word.sample(), id: faker.word.sample(), name: faker.word.sample(), order: faker.number.int({min: 0, max: undefined})}})))


export const getGetTimerMockHandler = (overrideResponse?: TimerctrlTimerDTO | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<TimerctrlTimerDTO> | TimerctrlTimerDTO)) => {
  return http.get('*/timer', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetTimerResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPutTimerMockHandler = (overrideResponse?: TimerctrlTimerDTO | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<TimerctrlTimerDTO> | TimerctrlTimerDTO)) => {
  return http.put('*/timer', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPutTimerResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostTimerMockHandler = (overrideResponse?: TimerctrlTimerDTO | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<TimerctrlTimerDTO> | TimerctrlTimerDTO)) => {
  return http.post('*/timer', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostTimerResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteTimerMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/timer', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getGetTimerGroupIdMockHandler = (overrideResponse?: TimerctrlTimerWithEdgeInfoDTO[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<TimerctrlTimerWithEdgeInfoDTO[]> | TimerctrlTimerWithEdgeInfoDTO[])) => {
  return http.get('*/timer/group/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetTimerGroupIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}
export const getTimerMock = () => [
  getGetTimerMockHandler(),
  getPutTimerMockHandler(),
  getPostTimerMockHandler(),
  getDeleteTimerMockHandler(),
  getGetTimerGroupIdMockHandler()
]
