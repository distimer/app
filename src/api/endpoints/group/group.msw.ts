/**
 * Generated by orval v7.0.1 🍺
 * Do not edit manually.
 * Distimer Swagger API
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  GroupctrlAffiliationDTO,
  GroupctrlGroupDTO
} from '../../schemas'

export const getGetGroupResponseMock = (): GroupctrlGroupDTO[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({create_at: faker.word.sample(), description: faker.word.sample(), id: faker.word.sample(), invite_policy: faker.number.int({min: undefined, max: undefined}), name: faker.word.sample(), nickname_policy: faker.word.sample(), owner_nickname: faker.word.sample(), reveal_policy: faker.number.int({min: undefined, max: undefined})})))

export const getPostGroupResponseMock = (overrideResponse: Partial< GroupctrlGroupDTO > = {}): GroupctrlGroupDTO => ({create_at: faker.word.sample(), description: faker.word.sample(), id: faker.word.sample(), invite_policy: faker.number.int({min: undefined, max: undefined}), name: faker.word.sample(), nickname_policy: faker.word.sample(), owner_nickname: faker.word.sample(), reveal_policy: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getPostGroupJoinResponseMock = (overrideResponse: Partial< GroupctrlGroupDTO > = {}): GroupctrlGroupDTO => ({create_at: faker.word.sample(), description: faker.word.sample(), id: faker.word.sample(), invite_policy: faker.number.int({min: undefined, max: undefined}), name: faker.word.sample(), nickname_policy: faker.word.sample(), owner_nickname: faker.word.sample(), reveal_policy: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})

export const getGetGroupMemberIdResponseMock = (): GroupctrlAffiliationDTO[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({group_id: faker.word.sample(), joined_at: faker.word.sample(), nickname: faker.word.sample(), role: faker.number.int({min: 0, max: 2}), user_id: faker.word.sample()})))

export const getPatchGroupRoleIdResponseMock = (overrideResponse: Partial< GroupctrlAffiliationDTO > = {}): GroupctrlAffiliationDTO => ({group_id: faker.word.sample(), joined_at: faker.word.sample(), nickname: faker.word.sample(), role: faker.number.int({min: 0, max: 2}), user_id: faker.word.sample(), ...overrideResponse})

export const getPutGroupIdResponseMock = (overrideResponse: Partial< GroupctrlGroupDTO > = {}): GroupctrlGroupDTO => ({create_at: faker.word.sample(), description: faker.word.sample(), id: faker.word.sample(), invite_policy: faker.number.int({min: undefined, max: undefined}), name: faker.word.sample(), nickname_policy: faker.word.sample(), owner_nickname: faker.word.sample(), reveal_policy: faker.number.int({min: undefined, max: undefined}), ...overrideResponse})


export const getGetGroupMockHandler = (overrideResponse?: GroupctrlGroupDTO[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GroupctrlGroupDTO[]> | GroupctrlGroupDTO[])) => {
  return http.get('*/group', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetGroupResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostGroupMockHandler = (overrideResponse?: GroupctrlGroupDTO | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<GroupctrlGroupDTO> | GroupctrlGroupDTO)) => {
  return http.post('*/group', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostGroupResponseMock()),
      { status: 201,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostGroupJoinMockHandler = (overrideResponse?: GroupctrlGroupDTO | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<GroupctrlGroupDTO> | GroupctrlGroupDTO)) => {
  return http.post('*/group/join', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostGroupJoinResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetGroupMemberIdMockHandler = (overrideResponse?: GroupctrlAffiliationDTO[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<GroupctrlAffiliationDTO[]> | GroupctrlAffiliationDTO[])) => {
  return http.get('*/group/member/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetGroupMemberIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteGroupQuitIdMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/group/quit/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}

export const getPatchGroupRoleIdMockHandler = (overrideResponse?: GroupctrlAffiliationDTO | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<GroupctrlAffiliationDTO> | GroupctrlAffiliationDTO)) => {
  return http.patch('*/group/role/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPatchGroupRoleIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPutGroupIdMockHandler = (overrideResponse?: GroupctrlGroupDTO | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<GroupctrlGroupDTO> | GroupctrlGroupDTO)) => {
  return http.put('*/group/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPutGroupIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteGroupIdMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/group/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}
export const getGroupMock = () => [
  getGetGroupMockHandler(),
  getPostGroupMockHandler(),
  getPostGroupJoinMockHandler(),
  getGetGroupMemberIdMockHandler(),
  getDeleteGroupQuitIdMockHandler(),
  getPatchGroupRoleIdMockHandler(),
  getPutGroupIdMockHandler(),
  getDeleteGroupIdMockHandler()
]
