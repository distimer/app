/**
 * Generated by orval v7.0.1 🍺
 * Do not edit manually.
 * Distimer Swagger API
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  StudylogctrlCreateStudyLogReq,
  StudylogctrlDailyStudyLog,
  StudylogctrlDailySubjectLog,
  StudylogctrlGroupMemberStatisticscResponse,
  StudylogctrlMyStudyLogDTO
} from '../../schemas'

export const getGetStudylogResponseMock = (): StudylogctrlMyStudyLogDTO[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({content: faker.word.sample(), end_at: faker.word.sample(), groups_to_share: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), id: faker.word.sample(), start_at: faker.word.sample(), subject_id: faker.word.sample()})))

export const getPostStudylogResponseMock = (overrideResponse: Partial< StudylogctrlMyStudyLogDTO > = {}): StudylogctrlMyStudyLogDTO => ({content: faker.word.sample(), end_at: faker.word.sample(), groups_to_share: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), id: faker.word.sample(), start_at: faker.word.sample(), subject_id: faker.word.sample(), ...overrideResponse})

export const getGetStudylogGroupStatisticsDateIdResponseMock = (): StudylogctrlGroupMemberStatisticscResponse[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({log: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({study_time: faker.number.int({min: undefined, max: undefined}), subject: {color: faker.word.sample(), id: faker.word.sample(), name: faker.word.sample(), order: faker.number.int({min: 0, max: undefined})}})), user_id: faker.word.sample()})))

export const getGetStudylogStatisticsDateResponseMock = (): StudylogctrlDailySubjectLog[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({category_id: faker.helpers.arrayElement([faker.word.sample(), undefined]), study_time: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), subject_id: faker.helpers.arrayElement([faker.word.sample(), undefined])})))

export const getGetStudylogStatisticsTermResponseMock = (): StudylogctrlDailyStudyLog[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({date: faker.helpers.arrayElement([faker.word.sample(), undefined]), log: faker.helpers.arrayElement([Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({category_id: faker.helpers.arrayElement([faker.word.sample(), undefined]), study_time: faker.helpers.arrayElement([faker.number.int({min: undefined, max: undefined}), undefined]), subject_id: faker.helpers.arrayElement([faker.word.sample(), undefined])})), undefined])})))

export const getGetStudylogSubjectIdResponseMock = (): StudylogctrlMyStudyLogDTO[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({content: faker.word.sample(), end_at: faker.word.sample(), groups_to_share: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), id: faker.word.sample(), start_at: faker.word.sample(), subject_id: faker.word.sample()})))

export const getPutStudylogIdResponseMock = (overrideResponse: Partial< StudylogctrlCreateStudyLogReq > = {}): StudylogctrlCreateStudyLogReq => ({content: faker.word.sample(), end_at: faker.word.sample(), groups_to_share: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => (faker.word.sample())), start_at: faker.word.sample(), subject_id: faker.word.sample(), ...overrideResponse})


export const getGetStudylogMockHandler = (overrideResponse?: StudylogctrlMyStudyLogDTO[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<StudylogctrlMyStudyLogDTO[]> | StudylogctrlMyStudyLogDTO[])) => {
  return http.get('*/studylog', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetStudylogResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostStudylogMockHandler = (overrideResponse?: StudylogctrlMyStudyLogDTO | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<StudylogctrlMyStudyLogDTO> | StudylogctrlMyStudyLogDTO)) => {
  return http.post('*/studylog', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostStudylogResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetStudylogGroupStatisticsDateIdMockHandler = (overrideResponse?: StudylogctrlGroupMemberStatisticscResponse[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<StudylogctrlGroupMemberStatisticscResponse[]> | StudylogctrlGroupMemberStatisticscResponse[])) => {
  return http.get('*/studylog/group/statistics/date/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetStudylogGroupStatisticsDateIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetStudylogStatisticsDateMockHandler = (overrideResponse?: StudylogctrlDailySubjectLog[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<StudylogctrlDailySubjectLog[]> | StudylogctrlDailySubjectLog[])) => {
  return http.get('*/studylog/statistics/date', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetStudylogStatisticsDateResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetStudylogStatisticsTermMockHandler = (overrideResponse?: StudylogctrlDailyStudyLog[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<StudylogctrlDailyStudyLog[]> | StudylogctrlDailyStudyLog[])) => {
  return http.get('*/studylog/statistics/term', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetStudylogStatisticsTermResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getGetStudylogSubjectIdMockHandler = (overrideResponse?: StudylogctrlMyStudyLogDTO[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<StudylogctrlMyStudyLogDTO[]> | StudylogctrlMyStudyLogDTO[])) => {
  return http.get('*/studylog/subject/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetStudylogSubjectIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPutStudylogIdMockHandler = (overrideResponse?: StudylogctrlCreateStudyLogReq | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<StudylogctrlCreateStudyLogReq> | StudylogctrlCreateStudyLogReq)) => {
  return http.put('*/studylog/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPutStudylogIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteStudylogIdMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/studylog/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}
export const getStudyLogMock = () => [
  getGetStudylogMockHandler(),
  getPostStudylogMockHandler(),
  getGetStudylogGroupStatisticsDateIdMockHandler(),
  getGetStudylogStatisticsDateMockHandler(),
  getGetStudylogStatisticsTermMockHandler(),
  getGetStudylogSubjectIdMockHandler(),
  getPutStudylogIdMockHandler(),
  getDeleteStudylogIdMockHandler()
]
