/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * Distimer Swagger API
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetStudylogGroupStatisticsDateIdParams,
  GetStudylogParams,
  GetStudylogStatisticsDateParams,
  GetStudylogStatisticsTermParams,
  GetStudylogSubjectIdParams,
  StudylogctrlCreateStudyLogReq,
  StudylogctrlCreateStudyLogReqBody,
  StudylogctrlDailyStudyLog,
  StudylogctrlDailySubjectLog,
  StudylogctrlGroupMemberStatisticscResponse,
  StudylogctrlMyStudyLogDTO
} from '../../schemas'
import { customInstance } from '../../mutator/axios';
import type { ErrorType, BodyType } from '../../mutator/axios';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Get All My Study Logs
 */
export const getStudylog = (
    params: GetStudylogParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<StudylogctrlMyStudyLogDTO[]>(
      {url: `/studylog`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetStudylogQueryKey = (params: GetStudylogParams,) => {
    return [`/studylog`, ...(params ? [params]: [])] as const;
    }

    
export const getGetStudylogInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getStudylog>>>, TError = ErrorType<unknown>>(params: GetStudylogParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStudylog>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStudylogQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStudylog>>> = ({ signal }) => getStudylog(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStudylog>>, TError, TData> & { queryKey: QueryKey }
}

export type GetStudylogInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getStudylog>>>
export type GetStudylogInfiniteQueryError = ErrorType<unknown>


export function useGetStudylogInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getStudylog>>>, TError = ErrorType<unknown>>(
 params: GetStudylogParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStudylog>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStudylog>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetStudylogInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getStudylog>>>, TError = ErrorType<unknown>>(
 params: GetStudylogParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStudylog>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStudylog>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetStudylogInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getStudylog>>>, TError = ErrorType<unknown>>(
 params: GetStudylogParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStudylog>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Get All My Study Logs
 */

export function useGetStudylogInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getStudylog>>>, TError = ErrorType<unknown>>(
 params: GetStudylogParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStudylog>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetStudylogInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetStudylogQueryOptions = <TData = Awaited<ReturnType<typeof getStudylog>>, TError = ErrorType<unknown>>(params: GetStudylogParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudylog>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStudylogQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStudylog>>> = ({ signal }) => getStudylog(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getStudylog>>, TError, TData> & { queryKey: QueryKey }
}

export type GetStudylogQueryResult = NonNullable<Awaited<ReturnType<typeof getStudylog>>>
export type GetStudylogQueryError = ErrorType<unknown>


export function useGetStudylog<TData = Awaited<ReturnType<typeof getStudylog>>, TError = ErrorType<unknown>>(
 params: GetStudylogParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudylog>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStudylog>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetStudylog<TData = Awaited<ReturnType<typeof getStudylog>>, TError = ErrorType<unknown>>(
 params: GetStudylogParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudylog>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStudylog>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetStudylog<TData = Awaited<ReturnType<typeof getStudylog>>, TError = ErrorType<unknown>>(
 params: GetStudylogParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudylog>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Get All My Study Logs
 */

export function useGetStudylog<TData = Awaited<ReturnType<typeof getStudylog>>, TError = ErrorType<unknown>>(
 params: GetStudylogParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudylog>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetStudylogQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create Study Log
 */
export const postStudylog = (
    studylogctrlCreateStudyLogReqBody: BodyType<StudylogctrlCreateStudyLogReqBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<StudylogctrlMyStudyLogDTO>(
      {url: `/studylog`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: studylogctrlCreateStudyLogReqBody
    },
      options);
    }
  


export const getPostStudylogMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postStudylog>>, TError,{data: BodyType<StudylogctrlCreateStudyLogReqBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postStudylog>>, TError,{data: BodyType<StudylogctrlCreateStudyLogReqBody>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postStudylog>>, {data: BodyType<StudylogctrlCreateStudyLogReqBody>}> = (props) => {
          const {data} = props ?? {};

          return  postStudylog(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostStudylogMutationResult = NonNullable<Awaited<ReturnType<typeof postStudylog>>>
    export type PostStudylogMutationBody = BodyType<StudylogctrlCreateStudyLogReqBody>
    export type PostStudylogMutationError = ErrorType<void>

    /**
 * @summary Create Study Log
 */
export const usePostStudylog = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postStudylog>>, TError,{data: BodyType<StudylogctrlCreateStudyLogReqBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof postStudylog>>,
        TError,
        {data: BodyType<StudylogctrlCreateStudyLogReqBody>},
        TContext
      > => {

      const mutationOptions = getPostStudylogMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Group Member Statistics by Date
 */
export const getStudylogGroupStatisticsDateId = (
    id: string,
    params?: GetStudylogGroupStatisticsDateIdParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<StudylogctrlGroupMemberStatisticscResponse[]>(
      {url: `/studylog/group/statistics/date/${id}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetStudylogGroupStatisticsDateIdQueryKey = (id: string,
    params?: GetStudylogGroupStatisticsDateIdParams,) => {
    return [`/studylog/group/statistics/date/${id}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetStudylogGroupStatisticsDateIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getStudylogGroupStatisticsDateId>>>, TError = ErrorType<void>>(id: string,
    params?: GetStudylogGroupStatisticsDateIdParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStudylogGroupStatisticsDateId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStudylogGroupStatisticsDateIdQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStudylogGroupStatisticsDateId>>> = ({ signal }) => getStudylogGroupStatisticsDateId(id,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStudylogGroupStatisticsDateId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetStudylogGroupStatisticsDateIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getStudylogGroupStatisticsDateId>>>
export type GetStudylogGroupStatisticsDateIdInfiniteQueryError = ErrorType<void>


export function useGetStudylogGroupStatisticsDateIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getStudylogGroupStatisticsDateId>>>, TError = ErrorType<void>>(
 id: string,
    params: undefined |  GetStudylogGroupStatisticsDateIdParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStudylogGroupStatisticsDateId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStudylogGroupStatisticsDateId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetStudylogGroupStatisticsDateIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getStudylogGroupStatisticsDateId>>>, TError = ErrorType<void>>(
 id: string,
    params?: GetStudylogGroupStatisticsDateIdParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStudylogGroupStatisticsDateId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStudylogGroupStatisticsDateId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetStudylogGroupStatisticsDateIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getStudylogGroupStatisticsDateId>>>, TError = ErrorType<void>>(
 id: string,
    params?: GetStudylogGroupStatisticsDateIdParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStudylogGroupStatisticsDateId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Get Group Member Statistics by Date
 */

export function useGetStudylogGroupStatisticsDateIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getStudylogGroupStatisticsDateId>>>, TError = ErrorType<void>>(
 id: string,
    params?: GetStudylogGroupStatisticsDateIdParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStudylogGroupStatisticsDateId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetStudylogGroupStatisticsDateIdInfiniteQueryOptions(id,params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetStudylogGroupStatisticsDateIdQueryOptions = <TData = Awaited<ReturnType<typeof getStudylogGroupStatisticsDateId>>, TError = ErrorType<void>>(id: string,
    params?: GetStudylogGroupStatisticsDateIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudylogGroupStatisticsDateId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStudylogGroupStatisticsDateIdQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStudylogGroupStatisticsDateId>>> = ({ signal }) => getStudylogGroupStatisticsDateId(id,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getStudylogGroupStatisticsDateId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetStudylogGroupStatisticsDateIdQueryResult = NonNullable<Awaited<ReturnType<typeof getStudylogGroupStatisticsDateId>>>
export type GetStudylogGroupStatisticsDateIdQueryError = ErrorType<void>


export function useGetStudylogGroupStatisticsDateId<TData = Awaited<ReturnType<typeof getStudylogGroupStatisticsDateId>>, TError = ErrorType<void>>(
 id: string,
    params: undefined |  GetStudylogGroupStatisticsDateIdParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudylogGroupStatisticsDateId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStudylogGroupStatisticsDateId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetStudylogGroupStatisticsDateId<TData = Awaited<ReturnType<typeof getStudylogGroupStatisticsDateId>>, TError = ErrorType<void>>(
 id: string,
    params?: GetStudylogGroupStatisticsDateIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudylogGroupStatisticsDateId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStudylogGroupStatisticsDateId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetStudylogGroupStatisticsDateId<TData = Awaited<ReturnType<typeof getStudylogGroupStatisticsDateId>>, TError = ErrorType<void>>(
 id: string,
    params?: GetStudylogGroupStatisticsDateIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudylogGroupStatisticsDateId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Get Group Member Statistics by Date
 */

export function useGetStudylogGroupStatisticsDateId<TData = Awaited<ReturnType<typeof getStudylogGroupStatisticsDateId>>, TError = ErrorType<void>>(
 id: string,
    params?: GetStudylogGroupStatisticsDateIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudylogGroupStatisticsDateId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetStudylogGroupStatisticsDateIdQueryOptions(id,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get statistics of study logs with date
 */
export const getStudylogStatisticsDate = (
    params?: GetStudylogStatisticsDateParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<StudylogctrlDailySubjectLog[]>(
      {url: `/studylog/statistics/date`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetStudylogStatisticsDateQueryKey = (params?: GetStudylogStatisticsDateParams,) => {
    return [`/studylog/statistics/date`, ...(params ? [params]: [])] as const;
    }

    
export const getGetStudylogStatisticsDateInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getStudylogStatisticsDate>>>, TError = ErrorType<void>>(params?: GetStudylogStatisticsDateParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStudylogStatisticsDate>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStudylogStatisticsDateQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStudylogStatisticsDate>>> = ({ signal }) => getStudylogStatisticsDate(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStudylogStatisticsDate>>, TError, TData> & { queryKey: QueryKey }
}

export type GetStudylogStatisticsDateInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getStudylogStatisticsDate>>>
export type GetStudylogStatisticsDateInfiniteQueryError = ErrorType<void>


export function useGetStudylogStatisticsDateInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getStudylogStatisticsDate>>>, TError = ErrorType<void>>(
 params: undefined |  GetStudylogStatisticsDateParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStudylogStatisticsDate>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStudylogStatisticsDate>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetStudylogStatisticsDateInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getStudylogStatisticsDate>>>, TError = ErrorType<void>>(
 params?: GetStudylogStatisticsDateParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStudylogStatisticsDate>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStudylogStatisticsDate>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetStudylogStatisticsDateInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getStudylogStatisticsDate>>>, TError = ErrorType<void>>(
 params?: GetStudylogStatisticsDateParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStudylogStatisticsDate>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Get statistics of study logs with date
 */

export function useGetStudylogStatisticsDateInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getStudylogStatisticsDate>>>, TError = ErrorType<void>>(
 params?: GetStudylogStatisticsDateParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStudylogStatisticsDate>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetStudylogStatisticsDateInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetStudylogStatisticsDateQueryOptions = <TData = Awaited<ReturnType<typeof getStudylogStatisticsDate>>, TError = ErrorType<void>>(params?: GetStudylogStatisticsDateParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudylogStatisticsDate>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStudylogStatisticsDateQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStudylogStatisticsDate>>> = ({ signal }) => getStudylogStatisticsDate(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getStudylogStatisticsDate>>, TError, TData> & { queryKey: QueryKey }
}

export type GetStudylogStatisticsDateQueryResult = NonNullable<Awaited<ReturnType<typeof getStudylogStatisticsDate>>>
export type GetStudylogStatisticsDateQueryError = ErrorType<void>


export function useGetStudylogStatisticsDate<TData = Awaited<ReturnType<typeof getStudylogStatisticsDate>>, TError = ErrorType<void>>(
 params: undefined |  GetStudylogStatisticsDateParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudylogStatisticsDate>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStudylogStatisticsDate>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetStudylogStatisticsDate<TData = Awaited<ReturnType<typeof getStudylogStatisticsDate>>, TError = ErrorType<void>>(
 params?: GetStudylogStatisticsDateParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudylogStatisticsDate>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStudylogStatisticsDate>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetStudylogStatisticsDate<TData = Awaited<ReturnType<typeof getStudylogStatisticsDate>>, TError = ErrorType<void>>(
 params?: GetStudylogStatisticsDateParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudylogStatisticsDate>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Get statistics of study logs with date
 */

export function useGetStudylogStatisticsDate<TData = Awaited<ReturnType<typeof getStudylogStatisticsDate>>, TError = ErrorType<void>>(
 params?: GetStudylogStatisticsDateParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudylogStatisticsDate>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetStudylogStatisticsDateQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Statistics with Term
 */
export const getStudylogStatisticsTerm = (
    params: GetStudylogStatisticsTermParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<StudylogctrlDailyStudyLog[]>(
      {url: `/studylog/statistics/term`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetStudylogStatisticsTermQueryKey = (params: GetStudylogStatisticsTermParams,) => {
    return [`/studylog/statistics/term`, ...(params ? [params]: [])] as const;
    }

    
export const getGetStudylogStatisticsTermInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getStudylogStatisticsTerm>>>, TError = ErrorType<void>>(params: GetStudylogStatisticsTermParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStudylogStatisticsTerm>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStudylogStatisticsTermQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStudylogStatisticsTerm>>> = ({ signal }) => getStudylogStatisticsTerm(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStudylogStatisticsTerm>>, TError, TData> & { queryKey: QueryKey }
}

export type GetStudylogStatisticsTermInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getStudylogStatisticsTerm>>>
export type GetStudylogStatisticsTermInfiniteQueryError = ErrorType<void>


export function useGetStudylogStatisticsTermInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getStudylogStatisticsTerm>>>, TError = ErrorType<void>>(
 params: GetStudylogStatisticsTermParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStudylogStatisticsTerm>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStudylogStatisticsTerm>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetStudylogStatisticsTermInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getStudylogStatisticsTerm>>>, TError = ErrorType<void>>(
 params: GetStudylogStatisticsTermParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStudylogStatisticsTerm>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStudylogStatisticsTerm>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetStudylogStatisticsTermInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getStudylogStatisticsTerm>>>, TError = ErrorType<void>>(
 params: GetStudylogStatisticsTermParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStudylogStatisticsTerm>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Get Statistics with Term
 */

export function useGetStudylogStatisticsTermInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getStudylogStatisticsTerm>>>, TError = ErrorType<void>>(
 params: GetStudylogStatisticsTermParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStudylogStatisticsTerm>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetStudylogStatisticsTermInfiniteQueryOptions(params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetStudylogStatisticsTermQueryOptions = <TData = Awaited<ReturnType<typeof getStudylogStatisticsTerm>>, TError = ErrorType<void>>(params: GetStudylogStatisticsTermParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudylogStatisticsTerm>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStudylogStatisticsTermQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStudylogStatisticsTerm>>> = ({ signal }) => getStudylogStatisticsTerm(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getStudylogStatisticsTerm>>, TError, TData> & { queryKey: QueryKey }
}

export type GetStudylogStatisticsTermQueryResult = NonNullable<Awaited<ReturnType<typeof getStudylogStatisticsTerm>>>
export type GetStudylogStatisticsTermQueryError = ErrorType<void>


export function useGetStudylogStatisticsTerm<TData = Awaited<ReturnType<typeof getStudylogStatisticsTerm>>, TError = ErrorType<void>>(
 params: GetStudylogStatisticsTermParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudylogStatisticsTerm>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStudylogStatisticsTerm>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetStudylogStatisticsTerm<TData = Awaited<ReturnType<typeof getStudylogStatisticsTerm>>, TError = ErrorType<void>>(
 params: GetStudylogStatisticsTermParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudylogStatisticsTerm>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStudylogStatisticsTerm>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetStudylogStatisticsTerm<TData = Awaited<ReturnType<typeof getStudylogStatisticsTerm>>, TError = ErrorType<void>>(
 params: GetStudylogStatisticsTermParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudylogStatisticsTerm>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Get Statistics with Term
 */

export function useGetStudylogStatisticsTerm<TData = Awaited<ReturnType<typeof getStudylogStatisticsTerm>>, TError = ErrorType<void>>(
 params: GetStudylogStatisticsTermParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudylogStatisticsTerm>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetStudylogStatisticsTermQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Get Study Log with Subject
 */
export const getStudylogSubjectId = (
    id: string,
    params: GetStudylogSubjectIdParams,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<StudylogctrlMyStudyLogDTO[]>(
      {url: `/studylog/subject/${id}`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetStudylogSubjectIdQueryKey = (id: string,
    params: GetStudylogSubjectIdParams,) => {
    return [`/studylog/subject/${id}`, ...(params ? [params]: [])] as const;
    }

    
export const getGetStudylogSubjectIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getStudylogSubjectId>>>, TError = ErrorType<unknown>>(id: string,
    params: GetStudylogSubjectIdParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStudylogSubjectId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStudylogSubjectIdQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStudylogSubjectId>>> = ({ signal }) => getStudylogSubjectId(id,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStudylogSubjectId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetStudylogSubjectIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getStudylogSubjectId>>>
export type GetStudylogSubjectIdInfiniteQueryError = ErrorType<unknown>


export function useGetStudylogSubjectIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getStudylogSubjectId>>>, TError = ErrorType<unknown>>(
 id: string,
    params: GetStudylogSubjectIdParams, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStudylogSubjectId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStudylogSubjectId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetStudylogSubjectIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getStudylogSubjectId>>>, TError = ErrorType<unknown>>(
 id: string,
    params: GetStudylogSubjectIdParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStudylogSubjectId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStudylogSubjectId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetStudylogSubjectIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getStudylogSubjectId>>>, TError = ErrorType<unknown>>(
 id: string,
    params: GetStudylogSubjectIdParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStudylogSubjectId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Get Study Log with Subject
 */

export function useGetStudylogSubjectIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getStudylogSubjectId>>>, TError = ErrorType<unknown>>(
 id: string,
    params: GetStudylogSubjectIdParams, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getStudylogSubjectId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetStudylogSubjectIdInfiniteQueryOptions(id,params,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetStudylogSubjectIdQueryOptions = <TData = Awaited<ReturnType<typeof getStudylogSubjectId>>, TError = ErrorType<unknown>>(id: string,
    params: GetStudylogSubjectIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudylogSubjectId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetStudylogSubjectIdQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getStudylogSubjectId>>> = ({ signal }) => getStudylogSubjectId(id,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getStudylogSubjectId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetStudylogSubjectIdQueryResult = NonNullable<Awaited<ReturnType<typeof getStudylogSubjectId>>>
export type GetStudylogSubjectIdQueryError = ErrorType<unknown>


export function useGetStudylogSubjectId<TData = Awaited<ReturnType<typeof getStudylogSubjectId>>, TError = ErrorType<unknown>>(
 id: string,
    params: GetStudylogSubjectIdParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudylogSubjectId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStudylogSubjectId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetStudylogSubjectId<TData = Awaited<ReturnType<typeof getStudylogSubjectId>>, TError = ErrorType<unknown>>(
 id: string,
    params: GetStudylogSubjectIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudylogSubjectId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getStudylogSubjectId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetStudylogSubjectId<TData = Awaited<ReturnType<typeof getStudylogSubjectId>>, TError = ErrorType<unknown>>(
 id: string,
    params: GetStudylogSubjectIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudylogSubjectId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Get Study Log with Subject
 */

export function useGetStudylogSubjectId<TData = Awaited<ReturnType<typeof getStudylogSubjectId>>, TError = ErrorType<unknown>>(
 id: string,
    params: GetStudylogSubjectIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getStudylogSubjectId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetStudylogSubjectIdQueryOptions(id,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Modify Study Log
 */
export const putStudylogId = (
    id: string,
    studylogctrlCreateStudyLogReqBody: BodyType<StudylogctrlCreateStudyLogReqBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<StudylogctrlCreateStudyLogReq>(
      {url: `/studylog/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: studylogctrlCreateStudyLogReqBody
    },
      options);
    }
  


export const getPutStudylogIdMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putStudylogId>>, TError,{id: string;data: BodyType<StudylogctrlCreateStudyLogReqBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof putStudylogId>>, TError,{id: string;data: BodyType<StudylogctrlCreateStudyLogReqBody>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putStudylogId>>, {id: string;data: BodyType<StudylogctrlCreateStudyLogReqBody>}> = (props) => {
          const {id,data} = props ?? {};

          return  putStudylogId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutStudylogIdMutationResult = NonNullable<Awaited<ReturnType<typeof putStudylogId>>>
    export type PutStudylogIdMutationBody = BodyType<StudylogctrlCreateStudyLogReqBody>
    export type PutStudylogIdMutationError = ErrorType<void>

    /**
 * @summary Modify Study Log
 */
export const usePutStudylogId = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putStudylogId>>, TError,{id: string;data: BodyType<StudylogctrlCreateStudyLogReqBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof putStudylogId>>,
        TError,
        {id: string;data: BodyType<StudylogctrlCreateStudyLogReqBody>},
        TContext
      > => {

      const mutationOptions = getPutStudylogIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Delete StudyLog
 */
export const deleteStudylogId = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/studylog/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteStudylogIdMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteStudylogId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteStudylogId>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteStudylogId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteStudylogId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteStudylogIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteStudylogId>>>
    
    export type DeleteStudylogIdMutationError = ErrorType<void>

    /**
 * @summary Delete StudyLog
 */
export const useDeleteStudylogId = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteStudylogId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteStudylogId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteStudylogIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    