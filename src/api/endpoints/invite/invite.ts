/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * Distimer Swagger API
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  InvitectrlInviteCodeInfoRes,
  InvitectrlInviteGroupRes
} from '../../schemas'
import { customInstance } from '../../mutator/axios';
import type { ErrorType } from '../../mutator/axios';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Get Invite Code List
 */
export const getInviteGroupId = (
    id: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<string[]>(
      {url: `/invite/group/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetInviteGroupIdQueryKey = (id: string,) => {
    return [`/invite/group/${id}`] as const;
    }

    
export const getGetInviteGroupIdInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getInviteGroupId>>>, TError = ErrorType<unknown>>(id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getInviteGroupId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetInviteGroupIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getInviteGroupId>>> = ({ signal }) => getInviteGroupId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getInviteGroupId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetInviteGroupIdInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getInviteGroupId>>>
export type GetInviteGroupIdInfiniteQueryError = ErrorType<unknown>


export function useGetInviteGroupIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getInviteGroupId>>>, TError = ErrorType<unknown>>(
 id: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getInviteGroupId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInviteGroupId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetInviteGroupIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getInviteGroupId>>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getInviteGroupId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInviteGroupId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetInviteGroupIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getInviteGroupId>>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getInviteGroupId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Get Invite Code List
 */

export function useGetInviteGroupIdInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getInviteGroupId>>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getInviteGroupId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetInviteGroupIdInfiniteQueryOptions(id,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetInviteGroupIdQueryOptions = <TData = Awaited<ReturnType<typeof getInviteGroupId>>, TError = ErrorType<unknown>>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInviteGroupId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetInviteGroupIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getInviteGroupId>>> = ({ signal }) => getInviteGroupId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getInviteGroupId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetInviteGroupIdQueryResult = NonNullable<Awaited<ReturnType<typeof getInviteGroupId>>>
export type GetInviteGroupIdQueryError = ErrorType<unknown>


export function useGetInviteGroupId<TData = Awaited<ReturnType<typeof getInviteGroupId>>, TError = ErrorType<unknown>>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInviteGroupId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInviteGroupId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetInviteGroupId<TData = Awaited<ReturnType<typeof getInviteGroupId>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInviteGroupId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInviteGroupId>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetInviteGroupId<TData = Awaited<ReturnType<typeof getInviteGroupId>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInviteGroupId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Get Invite Code List
 */

export function useGetInviteGroupId<TData = Awaited<ReturnType<typeof getInviteGroupId>>, TError = ErrorType<unknown>>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInviteGroupId>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetInviteGroupIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Invite to Group
 */
export const postInviteGroupId = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<InvitectrlInviteGroupRes>(
      {url: `/invite/group/${id}`, method: 'POST'
    },
      options);
    }
  


export const getPostInviteGroupIdMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postInviteGroupId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postInviteGroupId>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postInviteGroupId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  postInviteGroupId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostInviteGroupIdMutationResult = NonNullable<Awaited<ReturnType<typeof postInviteGroupId>>>
    
    export type PostInviteGroupIdMutationError = ErrorType<unknown>

    /**
 * @summary Invite to Group
 */
export const usePostInviteGroupId = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postInviteGroupId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof postInviteGroupId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getPostInviteGroupIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Delete Invite Code
 */
export const deleteInviteGroupIdCode = (
    id: string,
    code: string,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/invite/group/${id}/${code}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteInviteGroupIdCodeMutationOptions = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteInviteGroupIdCode>>, TError,{id: string;code: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteInviteGroupIdCode>>, TError,{id: string;code: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteInviteGroupIdCode>>, {id: string;code: string}> = (props) => {
          const {id,code} = props ?? {};

          return  deleteInviteGroupIdCode(id,code,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteInviteGroupIdCodeMutationResult = NonNullable<Awaited<ReturnType<typeof deleteInviteGroupIdCode>>>
    
    export type DeleteInviteGroupIdCodeMutationError = ErrorType<unknown>

    /**
 * @summary Delete Invite Code
 */
export const useDeleteInviteGroupIdCode = <TError = ErrorType<unknown>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteInviteGroupIdCode>>, TError,{id: string;code: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteInviteGroupIdCode>>,
        TError,
        {id: string;code: string},
        TContext
      > => {

      const mutationOptions = getDeleteInviteGroupIdCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Get Invite Code Info
 */
export const getInviteCode = (
    code: string,
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<InvitectrlInviteCodeInfoRes>(
      {url: `/invite/${code}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetInviteCodeQueryKey = (code: string,) => {
    return [`/invite/${code}`] as const;
    }

    
export const getGetInviteCodeInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getInviteCode>>>, TError = ErrorType<unknown>>(code: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getInviteCode>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetInviteCodeQueryKey(code);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getInviteCode>>> = ({ signal }) => getInviteCode(code, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(code), ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getInviteCode>>, TError, TData> & { queryKey: QueryKey }
}

export type GetInviteCodeInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getInviteCode>>>
export type GetInviteCodeInfiniteQueryError = ErrorType<unknown>


export function useGetInviteCodeInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getInviteCode>>>, TError = ErrorType<unknown>>(
 code: string, options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getInviteCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInviteCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetInviteCodeInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getInviteCode>>>, TError = ErrorType<unknown>>(
 code: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getInviteCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInviteCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetInviteCodeInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getInviteCode>>>, TError = ErrorType<unknown>>(
 code: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getInviteCode>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Get Invite Code Info
 */

export function useGetInviteCodeInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getInviteCode>>>, TError = ErrorType<unknown>>(
 code: string, options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getInviteCode>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetInviteCodeInfiniteQueryOptions(code,options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetInviteCodeQueryOptions = <TData = Awaited<ReturnType<typeof getInviteCode>>, TError = ErrorType<unknown>>(code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInviteCode>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetInviteCodeQueryKey(code);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getInviteCode>>> = ({ signal }) => getInviteCode(code, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(code), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getInviteCode>>, TError, TData> & { queryKey: QueryKey }
}

export type GetInviteCodeQueryResult = NonNullable<Awaited<ReturnType<typeof getInviteCode>>>
export type GetInviteCodeQueryError = ErrorType<unknown>


export function useGetInviteCode<TData = Awaited<ReturnType<typeof getInviteCode>>, TError = ErrorType<unknown>>(
 code: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInviteCode>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInviteCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetInviteCode<TData = Awaited<ReturnType<typeof getInviteCode>>, TError = ErrorType<unknown>>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInviteCode>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getInviteCode>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetInviteCode<TData = Awaited<ReturnType<typeof getInviteCode>>, TError = ErrorType<unknown>>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInviteCode>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Get Invite Code Info
 */

export function useGetInviteCode<TData = Awaited<ReturnType<typeof getInviteCode>>, TError = ErrorType<unknown>>(
 code: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getInviteCode>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetInviteCodeQueryOptions(code,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



