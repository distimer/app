/**
 * Generated by orval v7.0.1 🍺
 * Do not edit manually.
 * Distimer Swagger API
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  CategoryctrlCategoryDTO,
  CategoryctrlCategoryOrderElement,
  CategoryctrlModifyCategoryRes
} from '../../schemas'

export const getGetCategoryResponseMock = (): CategoryctrlCategoryDTO[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.word.sample(), name: faker.word.sample(), order: faker.number.int({min: 0, max: undefined}), subjects: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({color: faker.word.sample(), id: faker.word.sample(), name: faker.word.sample(), order: faker.number.int({min: 0, max: undefined})}))})))

export const getPostCategoryResponseMock = (overrideResponse: Partial< CategoryctrlCategoryDTO > = {}): CategoryctrlCategoryDTO => ({id: faker.word.sample(), name: faker.word.sample(), order: faker.number.int({min: 0, max: undefined}), subjects: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({color: faker.word.sample(), id: faker.word.sample(), name: faker.word.sample(), order: faker.number.int({min: 0, max: undefined})})), ...overrideResponse})

export const getPostCategoryBatchResponseMock = (): CategoryctrlCategoryDTO[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({id: faker.word.sample(), name: faker.word.sample(), order: faker.number.int({min: 0, max: undefined}), subjects: Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({color: faker.word.sample(), id: faker.word.sample(), name: faker.word.sample(), order: faker.number.int({min: 0, max: undefined})}))})))

export const getPatchCategoryOrderResponseMock = (): CategoryctrlCategoryOrderElement[] => (Array.from({ length: faker.number.int({ min: 1, max: 10 }) }, (_, i) => i + 1).map(() => ({category_id: faker.word.sample(), order: faker.number.int({min: 0, max: undefined})})))

export const getPutCategoryIdResponseMock = (overrideResponse: Partial< CategoryctrlModifyCategoryRes > = {}): CategoryctrlModifyCategoryRes => ({id: faker.helpers.arrayElement([faker.word.sample(), undefined]), name: faker.helpers.arrayElement([faker.word.sample(), undefined]), ...overrideResponse})


export const getGetCategoryMockHandler = (overrideResponse?: CategoryctrlCategoryDTO[] | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<CategoryctrlCategoryDTO[]> | CategoryctrlCategoryDTO[])) => {
  return http.get('*/category', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetCategoryResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostCategoryMockHandler = (overrideResponse?: CategoryctrlCategoryDTO | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CategoryctrlCategoryDTO> | CategoryctrlCategoryDTO)) => {
  return http.post('*/category', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostCategoryResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPostCategoryBatchMockHandler = (overrideResponse?: CategoryctrlCategoryDTO[] | ((info: Parameters<Parameters<typeof http.post>[1]>[0]) => Promise<CategoryctrlCategoryDTO[]> | CategoryctrlCategoryDTO[])) => {
  return http.post('*/category/batch', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPostCategoryBatchResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPatchCategoryOrderMockHandler = (overrideResponse?: CategoryctrlCategoryOrderElement[] | ((info: Parameters<Parameters<typeof http.patch>[1]>[0]) => Promise<CategoryctrlCategoryOrderElement[]> | CategoryctrlCategoryOrderElement[])) => {
  return http.patch('*/category/order', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPatchCategoryOrderResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPutCategoryIdMockHandler = (overrideResponse?: CategoryctrlModifyCategoryRes | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<CategoryctrlModifyCategoryRes> | CategoryctrlModifyCategoryRes)) => {
  return http.put('*/category/:id', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPutCategoryIdResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteCategoryIdMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/category/:id', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}
export const getCategoryMock = () => [
  getGetCategoryMockHandler(),
  getPostCategoryMockHandler(),
  getPostCategoryBatchMockHandler(),
  getPatchCategoryOrderMockHandler(),
  getPutCategoryIdMockHandler(),
  getDeleteCategoryIdMockHandler()
]
