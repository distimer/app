/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * Distimer Swagger API
 * OpenAPI spec version: 1.0
 */
import {
  useInfiniteQuery,
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  DefinedInitialDataOptions,
  DefinedUseInfiniteQueryResult,
  DefinedUseQueryResult,
  InfiniteData,
  MutationFunction,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseInfiniteQueryOptions,
  UseInfiniteQueryResult,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  CategoryctrlCategoryDTO,
  CategoryctrlCategoryOrderElement,
  CategoryctrlCreateCategoryReqBody,
  CategoryctrlModifyCategoryRes
} from '../../schemas'
import { customInstance } from '../../mutator/axios';
import type { ErrorType, BodyType } from '../../mutator/axios';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * [EDGE INCLUDED!]Subject list is included in each category
 * @summary Get Category List
 */
export const getCategory = (
    
 options?: SecondParameter<typeof customInstance>,signal?: AbortSignal
) => {
      
      
      return customInstance<CategoryctrlCategoryDTO[]>(
      {url: `/category`, method: 'GET', signal
    },
      options);
    }
  

export const getGetCategoryQueryKey = () => {
    return [`/category`] as const;
    }

    
export const getGetCategoryInfiniteQueryOptions = <TData = InfiniteData<Awaited<ReturnType<typeof getCategory>>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCategory>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCategoryQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCategory>>> = ({ signal }) => getCategory(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCategory>>, TError, TData> & { queryKey: QueryKey }
}

export type GetCategoryInfiniteQueryResult = NonNullable<Awaited<ReturnType<typeof getCategory>>>
export type GetCategoryInfiniteQueryError = ErrorType<unknown>


export function useGetCategoryInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getCategory>>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCategory>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategory>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetCategoryInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getCategory>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCategory>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategory>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetCategoryInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getCategory>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCategory>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Get Category List
 */

export function useGetCategoryInfinite<TData = InfiniteData<Awaited<ReturnType<typeof getCategory>>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseInfiniteQueryOptions<Awaited<ReturnType<typeof getCategory>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetCategoryInfiniteQueryOptions(options)

  const query = useInfiniteQuery(queryOptions) as  UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getGetCategoryQueryOptions = <TData = Awaited<ReturnType<typeof getCategory>>, TError = ErrorType<unknown>>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategory>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetCategoryQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getCategory>>> = ({ signal }) => getCategory(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getCategory>>, TError, TData> & { queryKey: QueryKey }
}

export type GetCategoryQueryResult = NonNullable<Awaited<ReturnType<typeof getCategory>>>
export type GetCategoryQueryError = ErrorType<unknown>


export function useGetCategory<TData = Awaited<ReturnType<typeof getCategory>>, TError = ErrorType<unknown>>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategory>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategory>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  DefinedUseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetCategory<TData = Awaited<ReturnType<typeof getCategory>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategory>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getCategory>>,
          TError,
          TData
        > , 'initialData'
      >, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
export function useGetCategory<TData = Awaited<ReturnType<typeof getCategory>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategory>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey }
/**
 * @summary Get Category List
 */

export function useGetCategory<TData = Awaited<ReturnType<typeof getCategory>>, TError = ErrorType<unknown>>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getCategory>>, TError, TData>>, request?: SecondParameter<typeof customInstance>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } {

  const queryOptions = getGetCategoryQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



/**
 * @summary Create Category
 */
export const postCategory = (
    categoryctrlCreateCategoryReqBody: BodyType<CategoryctrlCreateCategoryReqBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<CategoryctrlCategoryDTO>(
      {url: `/category`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: categoryctrlCreateCategoryReqBody
    },
      options);
    }
  


export const getPostCategoryMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCategory>>, TError,{data: BodyType<CategoryctrlCreateCategoryReqBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postCategory>>, TError,{data: BodyType<CategoryctrlCreateCategoryReqBody>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postCategory>>, {data: BodyType<CategoryctrlCreateCategoryReqBody>}> = (props) => {
          const {data} = props ?? {};

          return  postCategory(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostCategoryMutationResult = NonNullable<Awaited<ReturnType<typeof postCategory>>>
    export type PostCategoryMutationBody = BodyType<CategoryctrlCreateCategoryReqBody>
    export type PostCategoryMutationError = ErrorType<void>

    /**
 * @summary Create Category
 */
export const usePostCategory = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postCategory>>, TError,{data: BodyType<CategoryctrlCreateCategoryReqBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof postCategory>>,
        TError,
        {data: BodyType<CategoryctrlCreateCategoryReqBody>},
        TContext
      > => {

      const mutationOptions = getPostCategoryMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Modify Category Order
 */
export const patchCategoryOrder = (
    categoryctrlCategoryOrderElement: BodyType<CategoryctrlCategoryOrderElement[]>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<CategoryctrlCategoryOrderElement[]>(
      {url: `/category/order`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: categoryctrlCategoryOrderElement
    },
      options);
    }
  


export const getPatchCategoryOrderMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchCategoryOrder>>, TError,{data: BodyType<CategoryctrlCategoryOrderElement[]>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof patchCategoryOrder>>, TError,{data: BodyType<CategoryctrlCategoryOrderElement[]>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchCategoryOrder>>, {data: BodyType<CategoryctrlCategoryOrderElement[]>}> = (props) => {
          const {data} = props ?? {};

          return  patchCategoryOrder(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchCategoryOrderMutationResult = NonNullable<Awaited<ReturnType<typeof patchCategoryOrder>>>
    export type PatchCategoryOrderMutationBody = BodyType<CategoryctrlCategoryOrderElement[]>
    export type PatchCategoryOrderMutationError = ErrorType<void>

    /**
 * @summary Modify Category Order
 */
export const usePatchCategoryOrder = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchCategoryOrder>>, TError,{data: BodyType<CategoryctrlCategoryOrderElement[]>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof patchCategoryOrder>>,
        TError,
        {data: BodyType<CategoryctrlCategoryOrderElement[]>},
        TContext
      > => {

      const mutationOptions = getPatchCategoryOrderMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Modify Category
 */
export const putCategoryId = (
    id: string,
    categoryctrlCreateCategoryReqBody: BodyType<CategoryctrlCreateCategoryReqBody>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<CategoryctrlModifyCategoryRes>(
      {url: `/category/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: categoryctrlCreateCategoryReqBody
    },
      options);
    }
  


export const getPutCategoryIdMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putCategoryId>>, TError,{id: string;data: BodyType<CategoryctrlCreateCategoryReqBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof putCategoryId>>, TError,{id: string;data: BodyType<CategoryctrlCreateCategoryReqBody>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putCategoryId>>, {id: string;data: BodyType<CategoryctrlCreateCategoryReqBody>}> = (props) => {
          const {id,data} = props ?? {};

          return  putCategoryId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutCategoryIdMutationResult = NonNullable<Awaited<ReturnType<typeof putCategoryId>>>
    export type PutCategoryIdMutationBody = BodyType<CategoryctrlCreateCategoryReqBody>
    export type PutCategoryIdMutationError = ErrorType<void>

    /**
 * @summary Modify Category
 */
export const usePutCategoryId = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putCategoryId>>, TError,{id: string;data: BodyType<CategoryctrlCreateCategoryReqBody>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof putCategoryId>>,
        TError,
        {id: string;data: BodyType<CategoryctrlCreateCategoryReqBody>},
        TContext
      > => {

      const mutationOptions = getPutCategoryIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Delete Category
 */
export const deleteCategoryId = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/category/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteCategoryIdMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCategoryId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteCategoryId>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteCategoryId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteCategoryId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteCategoryIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteCategoryId>>>
    
    export type DeleteCategoryIdMutationError = ErrorType<void>

    /**
 * @summary Delete Category
 */
export const useDeleteCategoryId = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteCategoryId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteCategoryId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteCategoryIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    