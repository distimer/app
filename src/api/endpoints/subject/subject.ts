/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * Distimer Swagger API
 * OpenAPI spec version: 1.0
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult
} from '@tanstack/react-query'
import type {
  SubjectctrlCreateSubjectBatchReq,
  SubjectctrlCreateSubjectReq,
  SubjectctrlModifySubjectInfoReq,
  SubjectctrlSubjectDTO,
  SubjectctrlSubjectOrderElement
} from '../../schemas'
import { customInstance } from '../../mutator/axios';
import type { ErrorType, BodyType } from '../../mutator/axios';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


/**
 * @summary Create Batch Subject
 */
export const postSubjectBatch = (
    subjectctrlCreateSubjectBatchReq: BodyType<SubjectctrlCreateSubjectBatchReq>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<SubjectctrlSubjectDTO[]>(
      {url: `/subject/batch`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: subjectctrlCreateSubjectBatchReq
    },
      options);
    }
  


export const getPostSubjectBatchMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSubjectBatch>>, TError,{data: BodyType<SubjectctrlCreateSubjectBatchReq>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postSubjectBatch>>, TError,{data: BodyType<SubjectctrlCreateSubjectBatchReq>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSubjectBatch>>, {data: BodyType<SubjectctrlCreateSubjectBatchReq>}> = (props) => {
          const {data} = props ?? {};

          return  postSubjectBatch(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSubjectBatchMutationResult = NonNullable<Awaited<ReturnType<typeof postSubjectBatch>>>
    export type PostSubjectBatchMutationBody = BodyType<SubjectctrlCreateSubjectBatchReq>
    export type PostSubjectBatchMutationError = ErrorType<void>

    /**
 * @summary Create Batch Subject
 */
export const usePostSubjectBatch = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSubjectBatch>>, TError,{data: BodyType<SubjectctrlCreateSubjectBatchReq>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSubjectBatch>>,
        TError,
        {data: BodyType<SubjectctrlCreateSubjectBatchReq>},
        TContext
      > => {

      const mutationOptions = getPostSubjectBatchMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Modify Subject Order
 */
export const patchSubjectOrder = (
    subjectctrlSubjectOrderElement: BodyType<SubjectctrlSubjectOrderElement[]>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<SubjectctrlSubjectOrderElement[]>(
      {url: `/subject/order`, method: 'PATCH',
      headers: {'Content-Type': 'application/json', },
      data: subjectctrlSubjectOrderElement
    },
      options);
    }
  


export const getPatchSubjectOrderMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchSubjectOrder>>, TError,{data: BodyType<SubjectctrlSubjectOrderElement[]>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof patchSubjectOrder>>, TError,{data: BodyType<SubjectctrlSubjectOrderElement[]>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof patchSubjectOrder>>, {data: BodyType<SubjectctrlSubjectOrderElement[]>}> = (props) => {
          const {data} = props ?? {};

          return  patchSubjectOrder(data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PatchSubjectOrderMutationResult = NonNullable<Awaited<ReturnType<typeof patchSubjectOrder>>>
    export type PatchSubjectOrderMutationBody = BodyType<SubjectctrlSubjectOrderElement[]>
    export type PatchSubjectOrderMutationError = ErrorType<void>

    /**
 * @summary Modify Subject Order
 */
export const usePatchSubjectOrder = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof patchSubjectOrder>>, TError,{data: BodyType<SubjectctrlSubjectOrderElement[]>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof patchSubjectOrder>>,
        TError,
        {data: BodyType<SubjectctrlSubjectOrderElement[]>},
        TContext
      > => {

      const mutationOptions = getPatchSubjectOrderMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Modify Subject Info
 */
export const putSubjectId = (
    id: string,
    subjectctrlModifySubjectInfoReq: BodyType<SubjectctrlModifySubjectInfoReq>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<SubjectctrlSubjectDTO>(
      {url: `/subject/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: subjectctrlModifySubjectInfoReq
    },
      options);
    }
  


export const getPutSubjectIdMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSubjectId>>, TError,{id: string;data: BodyType<SubjectctrlModifySubjectInfoReq>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof putSubjectId>>, TError,{id: string;data: BodyType<SubjectctrlModifySubjectInfoReq>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putSubjectId>>, {id: string;data: BodyType<SubjectctrlModifySubjectInfoReq>}> = (props) => {
          const {id,data} = props ?? {};

          return  putSubjectId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutSubjectIdMutationResult = NonNullable<Awaited<ReturnType<typeof putSubjectId>>>
    export type PutSubjectIdMutationBody = BodyType<SubjectctrlModifySubjectInfoReq>
    export type PutSubjectIdMutationError = ErrorType<void>

    /**
 * @summary Modify Subject Info
 */
export const usePutSubjectId = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putSubjectId>>, TError,{id: string;data: BodyType<SubjectctrlModifySubjectInfoReq>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof putSubjectId>>,
        TError,
        {id: string;data: BodyType<SubjectctrlModifySubjectInfoReq>},
        TContext
      > => {

      const mutationOptions = getPutSubjectIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Create Subject
 */
export const postSubjectId = (
    id: string,
    subjectctrlCreateSubjectReq: BodyType<SubjectctrlCreateSubjectReq>,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<SubjectctrlSubjectDTO>(
      {url: `/subject/${id}`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: subjectctrlCreateSubjectReq
    },
      options);
    }
  


export const getPostSubjectIdMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSubjectId>>, TError,{id: string;data: BodyType<SubjectctrlCreateSubjectReq>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof postSubjectId>>, TError,{id: string;data: BodyType<SubjectctrlCreateSubjectReq>}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSubjectId>>, {id: string;data: BodyType<SubjectctrlCreateSubjectReq>}> = (props) => {
          const {id,data} = props ?? {};

          return  postSubjectId(id,data,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostSubjectIdMutationResult = NonNullable<Awaited<ReturnType<typeof postSubjectId>>>
    export type PostSubjectIdMutationBody = BodyType<SubjectctrlCreateSubjectReq>
    export type PostSubjectIdMutationError = ErrorType<void>

    /**
 * @summary Create Subject
 */
export const usePostSubjectId = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSubjectId>>, TError,{id: string;data: BodyType<SubjectctrlCreateSubjectReq>}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof postSubjectId>>,
        TError,
        {id: string;data: BodyType<SubjectctrlCreateSubjectReq>},
        TContext
      > => {

      const mutationOptions = getPostSubjectIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    /**
 * @summary Delete Subject
 */
export const deleteSubjectId = (
    id: string,
 options?: SecondParameter<typeof customInstance>,) => {
      
      
      return customInstance<void>(
      {url: `/subject/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteSubjectIdMutationOptions = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSubjectId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSubjectId>>, TError,{id: string}, TContext> => {
const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSubjectId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteSubjectId(id,requestOptions)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type DeleteSubjectIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSubjectId>>>
    
    export type DeleteSubjectIdMutationError = ErrorType<void>

    /**
 * @summary Delete Subject
 */
export const useDeleteSubjectId = <TError = ErrorType<void>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSubjectId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof customInstance>}
): UseMutationResult<
        Awaited<ReturnType<typeof deleteSubjectId>>,
        TError,
        {id: string},
        TContext
      > => {

      const mutationOptions = getDeleteSubjectIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    