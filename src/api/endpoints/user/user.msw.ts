/**
 * Generated by orval v7.0.1 üç∫
 * Do not edit manually.
 * Distimer Swagger API
 * OpenAPI spec version: 1.0
 */
import {
  faker
} from '@faker-js/faker'
import {
  HttpResponse,
  delay,
  http
} from 'msw'
import type {
  UserctrlModifyUserInfoRes,
  UserctrlMyUserInfoRes
} from '../../schemas'

export const getGetUserResponseMock = (overrideResponse: Partial< UserctrlMyUserInfoRes > = {}): UserctrlMyUserInfoRes => ({created_at: faker.word.sample(), name: faker.word.sample(), oauth_provider: faker.number.int({min: undefined, max: undefined}), terms_agreed: faker.datatype.boolean(), user_id: faker.word.sample(), ...overrideResponse})

export const getPutUserResponseMock = (overrideResponse: Partial< UserctrlModifyUserInfoRes > = {}): UserctrlModifyUserInfoRes => ({name: faker.word.sample(), terms_agreed: faker.datatype.boolean(), user_id: faker.word.sample(), ...overrideResponse})


export const getGetUserMockHandler = (overrideResponse?: UserctrlMyUserInfoRes | ((info: Parameters<Parameters<typeof http.get>[1]>[0]) => Promise<UserctrlMyUserInfoRes> | UserctrlMyUserInfoRes)) => {
  return http.get('*/user', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getGetUserResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getPutUserMockHandler = (overrideResponse?: UserctrlModifyUserInfoRes | ((info: Parameters<Parameters<typeof http.put>[1]>[0]) => Promise<UserctrlModifyUserInfoRes> | UserctrlModifyUserInfoRes)) => {
  return http.put('*/user', async (info) => {await delay(1000);
  
    return new HttpResponse(JSON.stringify(overrideResponse !== undefined 
            ? (typeof overrideResponse === "function" ? await overrideResponse(info) : overrideResponse) 
            : getPutUserResponseMock()),
      { status: 200,
        headers: { 'Content-Type': 'application/json' }
      })
  })
}

export const getDeleteUserMockHandler = (overrideResponse?: void | ((info: Parameters<Parameters<typeof http.delete>[1]>[0]) => Promise<void> | void)) => {
  return http.delete('*/user', async (info) => {await delay(1000);
  if (typeof overrideResponse === 'function') {await overrideResponse(info); }
    return new HttpResponse(null,
      { status: 204,
        
      })
  })
}
export const getUserMock = () => [
  getGetUserMockHandler(),
  getPutUserMockHandler(),
  getDeleteUserMockHandler()
]
